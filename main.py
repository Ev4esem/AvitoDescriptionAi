import os
import json
from dotenv import load_dotenv
from agent import create_auto_parts_agent

def main():
    # Загрузка переменных окружения
    load_dotenv()
    api_key = os.getenv("OPENAI_API_KEY")
    
    if not api_key:
        api_key = input("Введите ваш API ключ OpenAI: ")
    
    # Создание агента
    agent = create_auto_parts_agent(api_key)
    
    # Запрос артикула у пользователя
    part_number = input("Введите номер артикула запчасти: ")
    
    # Запуск агента
    print(f"\n=== Начинаем обработку артикула: {part_number} ===\n")
    
    result = agent.run(
        f"""
        Обработай артикул запчасти "{part_number}" для генерации описания на Авито, СТРОГО следуя алгоритму:

        1. Выполни первичный поиск через инструмент search_part, передав ТОЛЬКО артикул "{part_number}".
           Этот инструмент вернет упрощенные данные только с SUP_ID и SUP_BRAND.

        2. Проверь результат:
           - Если результат найден (data.list не пустой), переходи к шагу 3.
           - Если результат не найден (data.list пустой), очисти артикул через clean_part_number, и попробуй поиск снова.
           - Если и после очистки ничего не найдено, сообщи об ошибке и останови выполнение.

        3. Из упрощенных данных поиска извлеки SUP_BRAND и SUP_ID из первого элемента списка.

        4. Выполни расширенный поиск через search_part_with_sup_id, передав ТРИ параметра ОДНОЙ СТРОКОЙ через запятые:
           search_part_with_sup_id("part_number,sup_id,sup_brand")
           
           Например: search_part_with_sup_id("{part_number},полученный_sup_id,полученный_sup_brand")
           
           Этот инструмент вернет упрощенные данные с ART_ID, ART_ARTICLE_NR, SUP_BRAND, ART_PRODUCT_NAME.

        5. Из результатов расширенного поиска извлеки нужные поля из первого элемента списка:
           - ART_ID (если пустое, используй SUP_ID из шага 3)
           - ART_ARTICLE_NR
           - SUP_BRAND
           
           ВАЖНО: Убедись, что все три значения есть и не пустые!

        6. Выполни запрос применимости через get_applicability, передавая ВСЕ ТРИ параметра ОДНОЙ СТРОКОЙ с запятыми:
           get_applicability("art_id,art_article_nr,sup_brand")
           
           ВАЖНО: Первый параметр должен быть валидным ID, не '0' и не пустой строкой!
           Этот инструмент вернет упрощенные данные только с NAME моделей автомобилей.

        7. Получи OEM-номера через get_oem_part, передав ART_ID из шага 5.
           Этот инструмент вернет упрощенные данные только с ARL_NUMBER номерами.

        8. Сгенерируй описание через generate_description, передав в указанном порядке:
           - SUP_BRAND (из шага 3)
           - исходный артикул "{part_number}"
           - результат расширенного поиска (из шага 4)
           - результат запроса применимости (из шага 6)
           - результат запроса OEM-номеров (из шага 7)

        9. Верни сгенерированное описание без дополнительных комментариев.

        ВНИМАНИЕ! Строго следуй всем шагам! Все инструменты теперь возвращают упрощенные данные только с нужными полями.
        """
    )
    
    print("\n=== Результат работы агента ===\n")
    print(result)
    
    # Сохраняем результат в файл
    with open(f"result_{part_number}.txt", "w", encoding="utf-8") as f:
        f.write(result)
    print(f"\nРезультат сохранен в файл: result_{part_number}.txt")

if __name__ == "__main__":
    main()